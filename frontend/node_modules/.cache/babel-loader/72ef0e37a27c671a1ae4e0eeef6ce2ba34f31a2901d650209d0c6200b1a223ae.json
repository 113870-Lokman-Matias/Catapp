{"ast":null,"code":"import axios from \"axios\";\n\n//#region Función para realizar el inicio de sesión del usuario\nasync function LoginUser(username, password) {\n  try {\n    const response = await axios.post(\"https://localhost:7207/usuario/login\", {\n      username: username.includes(\"@\") ? \"\" : username,\n      email: username.includes(\"@\") ? username : \"\",\n      password: password\n    });\n    if (response.data.statusCode === 200) {\n      localStorage.setItem(\"token\", response.data.token);\n      return true; // Indica que el inicio de sesión fue exitoso\n    } else {\n      return response.data;\n    }\n  } catch (err) {\n    throw err;\n  }\n}\n//#endregion\n\n//#region Función para obtener todos los usuarios\n_c = LoginUser;\nasync function GetUsers(state) {\n  const token = localStorage.getItem(\"token\"); // Obtener el token almacenado en el localStorage\n  const headers = {\n    Authorization: `Bearer ${token}` // Agregar el encabezado Authorization con el valor del token\n  };\n  const result = await axios.get(\"https://localhost:7207/usuario\", {\n    headers\n  });\n  const usuarios = result.data.usuarios || [];\n  state(usuarios);\n}\n//#endregion\n\n//#region Función para obtener los usuarios con rol \"Vendedor\"\n_c2 = GetUsers;\nasync function GetUsersSellers(state) {\n  const result = await axios.get(\"https://localhost:7207/usuario/vendedores\");\n  const vendedores = result.data.usuarios || [];\n  state(vendedores);\n}\n//#endregion\n\n//#region Función para obtener usuarios por un rol especifico para lista administrativa\n_c3 = GetUsersSellers;\nasync function GetUsersByRole(role, state) {\n  const token = localStorage.getItem(\"token\"); // Obtener el token almacenado en el localStorage\n  const headers = {\n    Authorization: `Bearer ${token}` // Agregar el encabezado Authorization con el valor del token\n  };\n  const result = await axios.get(\"https://localhost:7207/usuario/manage/\" + role, {\n    headers\n  });\n  const usuarios = result.data.usuarios || [];\n  state(usuarios);\n}\n//#endregion\n\n//#region Función para guardar un usuario en la base de datos\n_c4 = GetUsersByRole;\nasync function SaveUsers(data, headers) {\n  return axios.post(\"https://localhost:7207/usuario\", data, {\n    headers\n  });\n}\n//#endregion\n\n//#region Función para guardar un usuario en la base de datos sin estar logueado\n_c5 = SaveUsers;\nasync function SaveUsersNotLogged(data) {\n  return axios.post(\"https://localhost:7207/usuario/nologueado\", data);\n}\n//#endregion\n\n//#region Función para actualizar un usuario en la base de datos\n_c6 = SaveUsersNotLogged;\nasync function UpdateUsers(id, data, headers) {\n  return axios.put(`https://localhost:7207/usuario/${id}`, data, {\n    headers\n  });\n}\n//#endregion\n\n//#region Función para eliminar un usuario de la base de datos\n_c7 = UpdateUsers;\nasync function DeleteUsers(id, headers) {\n  return axios.delete(`https://localhost:7207/usuario/${id}`, {\n    headers\n  });\n}\n//#endregion\n\n//#region Función para verificar si existe el usuario/email\n_c8 = DeleteUsers;\nasync function SearchUsers(data) {\n  return axios.post(\"https://localhost:7207/usuario/search\", data);\n}\n//#endregion\n\n//#region Función para verificar si el codigo de verificacion existe y coincide con el usuario\n_c9 = SearchUsers;\nasync function VerifyUsers(data) {\n  return axios.post(\"https://localhost:7207/usuario/verify\", data);\n}\n//#endregion\n\n//#region Función para actualizar la contraseña de un usuario no logueado\n_c10 = VerifyUsers;\nasync function UpdatePasswordNotLoggedUsers(data) {\n  return axios.put(\"https://localhost:7207/usuario\", data);\n}\n//#endregion\n\n//#region Función para actualizar la contraseña de un usuario logueado\n_c11 = UpdatePasswordNotLoggedUsers;\nasync function UpdatePasswordUsers(data, headers) {\n  return axios.put(\"https://localhost:7207/usuario/reset\", data, {\n    headers\n  });\n}\n//#endregion\n\n//#region Función para activar o descativar la cuenta de un usuario\n_c12 = UpdatePasswordUsers;\nasync function UpdateUsersActive(id, data, headers) {\n  return axios.patch(`https://localhost:7207/usuario/${id}`, data, {\n    headers\n  });\n}\n//#endregion\n\n//#region Export\n_c13 = UpdateUsersActive;\nexport { LoginUser, GetUsers, GetUsersSellers, GetUsersByRole, SaveUsers, SaveUsersNotLogged, UpdateUsers, DeleteUsers, SearchUsers, VerifyUsers, UpdatePasswordNotLoggedUsers, UpdatePasswordUsers, UpdateUsersActive };\n//#endregion\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13;\n$RefreshReg$(_c, \"LoginUser\");\n$RefreshReg$(_c2, \"GetUsers\");\n$RefreshReg$(_c3, \"GetUsersSellers\");\n$RefreshReg$(_c4, \"GetUsersByRole\");\n$RefreshReg$(_c5, \"SaveUsers\");\n$RefreshReg$(_c6, \"SaveUsersNotLogged\");\n$RefreshReg$(_c7, \"UpdateUsers\");\n$RefreshReg$(_c8, \"DeleteUsers\");\n$RefreshReg$(_c9, \"SearchUsers\");\n$RefreshReg$(_c10, \"VerifyUsers\");\n$RefreshReg$(_c11, \"UpdatePasswordNotLoggedUsers\");\n$RefreshReg$(_c12, \"UpdatePasswordUsers\");\n$RefreshReg$(_c13, \"UpdateUsersActive\");","map":{"version":3,"names":["axios","LoginUser","username","password","response","post","includes","email","data","statusCode","localStorage","setItem","token","err","_c","GetUsers","state","getItem","headers","Authorization","result","get","usuarios","_c2","GetUsersSellers","vendedores","_c3","GetUsersByRole","role","_c4","SaveUsers","_c5","SaveUsersNotLogged","_c6","UpdateUsers","id","put","_c7","DeleteUsers","delete","_c8","SearchUsers","_c9","VerifyUsers","_c10","UpdatePasswordNotLoggedUsers","_c11","UpdatePasswordUsers","_c12","UpdateUsersActive","patch","_c13","$RefreshReg$"],"sources":["C:/Users/mati_/OneDrive/Escritorio/Catapp/frontend/src/services/UserService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n//#region Función para realizar el inicio de sesión del usuario\r\nasync function LoginUser(username, password) {\r\n  try {\r\n    const response = await axios.post(\"https://localhost:7207/usuario/login\", {\r\n      username: username.includes(\"@\") ? \"\" : username,\r\n      email: username.includes(\"@\") ? username : \"\",\r\n      password: password,\r\n    });\r\n\r\n    if (response.data.statusCode === 200) {\r\n      localStorage.setItem(\"token\", response.data.token);\r\n      return true; // Indica que el inicio de sesión fue exitoso\r\n    } else {\r\n      return response.data;\r\n    }\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n}\r\n//#endregion\r\n\r\n//#region Función para obtener todos los usuarios\r\nasync function GetUsers(state) {\r\n  const token = localStorage.getItem(\"token\"); // Obtener el token almacenado en el localStorage\r\n  const headers = {\r\n    Authorization: `Bearer ${token}`, // Agregar el encabezado Authorization con el valor del token\r\n  };\r\n\r\n  const result = await axios.get(\"https://localhost:7207/usuario\", { headers });\r\n  const usuarios = result.data.usuarios || [];\r\n  state(usuarios);\r\n}\r\n//#endregion\r\n\r\n//#region Función para obtener los usuarios con rol \"Vendedor\"\r\nasync function GetUsersSellers(state) {\r\n  const result = await axios.get(\"https://localhost:7207/usuario/vendedores\");\r\n  const vendedores = result.data.usuarios || [];\r\n  state(vendedores);\r\n}\r\n//#endregion\r\n\r\n//#region Función para obtener usuarios por un rol especifico para lista administrativa\r\nasync function GetUsersByRole(role, state) {\r\n  const token = localStorage.getItem(\"token\"); // Obtener el token almacenado en el localStorage\r\n  const headers = {\r\n    Authorization: `Bearer ${token}`, // Agregar el encabezado Authorization con el valor del token\r\n  };\r\n\r\n  const result = await axios.get(\r\n    \"https://localhost:7207/usuario/manage/\" + role,\r\n    { headers }\r\n  );\r\n  const usuarios = result.data.usuarios || [];\r\n  state(usuarios);\r\n}\r\n//#endregion\r\n\r\n//#region Función para guardar un usuario en la base de datos\r\nasync function SaveUsers(data, headers) {\r\n  return axios.post(\"https://localhost:7207/usuario\", data, { headers });\r\n}\r\n//#endregion\r\n\r\n//#region Función para guardar un usuario en la base de datos sin estar logueado\r\nasync function SaveUsersNotLogged(data) {\r\n  return axios.post(\"https://localhost:7207/usuario/nologueado\", data);\r\n}\r\n//#endregion\r\n\r\n//#region Función para actualizar un usuario en la base de datos\r\nasync function UpdateUsers(id, data, headers) {\r\n  return axios.put(`https://localhost:7207/usuario/${id}`, data, { headers });\r\n}\r\n//#endregion\r\n\r\n//#region Función para eliminar un usuario de la base de datos\r\nasync function DeleteUsers(id, headers) {\r\n  return axios.delete(`https://localhost:7207/usuario/${id}`, { headers });\r\n}\r\n//#endregion\r\n\r\n//#region Función para verificar si existe el usuario/email\r\nasync function SearchUsers(data) {\r\n  return axios.post(\"https://localhost:7207/usuario/search\", data);\r\n}\r\n//#endregion\r\n\r\n//#region Función para verificar si el codigo de verificacion existe y coincide con el usuario\r\nasync function VerifyUsers(data) {\r\n  return axios.post(\"https://localhost:7207/usuario/verify\", data);\r\n}\r\n//#endregion\r\n\r\n//#region Función para actualizar la contraseña de un usuario no logueado\r\nasync function UpdatePasswordNotLoggedUsers(data) {\r\n  return axios.put(\"https://localhost:7207/usuario\", data);\r\n}\r\n//#endregion\r\n\r\n//#region Función para actualizar la contraseña de un usuario logueado\r\nasync function UpdatePasswordUsers(data, headers) {\r\n  return axios.put(\"https://localhost:7207/usuario/reset\", data, { headers });\r\n}\r\n//#endregion\r\n\r\n//#region Función para activar o descativar la cuenta de un usuario\r\nasync function UpdateUsersActive(id, data, headers) {\r\n  return axios.patch(`https://localhost:7207/usuario/${id}`, data, { headers });\r\n}\r\n//#endregion\r\n\r\n//#region Export\r\nexport {\r\n  LoginUser,\r\n  GetUsers,\r\n  GetUsersSellers,\r\n  GetUsersByRole,\r\n  SaveUsers,\r\n  SaveUsersNotLogged,\r\n  UpdateUsers,\r\n  DeleteUsers,\r\n  SearchUsers,\r\n  VerifyUsers,\r\n  UpdatePasswordNotLoggedUsers,\r\n  UpdatePasswordUsers,\r\n  UpdateUsersActive,\r\n};\r\n//#endregion\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}